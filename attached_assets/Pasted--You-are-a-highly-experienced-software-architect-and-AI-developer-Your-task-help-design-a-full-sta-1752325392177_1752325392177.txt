
You are a highly experienced software architect and AI developer. Your task: help design a full-stack financial tracking website and platform similar to Monly AI, integrated with database and backend AI automation.

### Project Overview:
- A clone of Monly AI: financial tracking via WhatsApp chat, image, voice input.
- Input messages sent by user to AI via WhatsApp Business API.
- AI extracts transaction details (amount, category, wallet, description) using OCR (if image) or speech-to-text.
- Transactions stored and categorized automatically in the database.
- Offers web dashboard with transaction listings, filters, visualizations (pie chart, bar, heatmap).
- Generates daily/weekly/monthly reports and sends reminders via WhatsApp if no activity.
- Ensures data privacy, encryption, no third-party data sharing, ability to delete account.

### Enhanced Feature Set:
- Integrate bank/e-wallet APIs to import transactions automatically.
- Support user-defined budgets per category with real-time notifications when close or exceeding.
- Multi-user or family sharing accounts with role-based access (viewer vs editor).
- Gamification: badges or rewards when user maintains record consistency or stays under budget.
- Embedded chatbot UI inside web/mobile so user can type or speak transactions even without WhatsApp.
- Export reports in PDF, CSV, Excel, and sync with Google Sheets.
- Support multi-currency transactions and multi-language UI.
- Advanced AI analysis: predictive spending, budget suggestions, spending trends.
- Security features: two‑factor authentication, end-to-end encryption, automatic backup, GDPR/PDPA compliance.

### System Architecture & Tech Stack:
- Backend: Python (FastAPI) with OCR engine (Tesseract), speech-to-text (Google/Whisper), NLP classifier.
- WhatsApp Business API integration for chat-based input and reminders.
- Database: PostgreSQL / MongoDB with encryption.
- Frontend: React + Tailwind.
- Infrastructure: Docker, Kubernetes (if scaled), CI/CD with GitHub Actions.
- AI services: OpenAI / custom LLMs / Hugging Face for classification & parsing.

### Deliverables:
1. High‑level architecture diagram and component descriptions.
2. Sequence flow when user sends WhatsApp message (text, image, or voice).
3. Full database schema and entity relationship (ERD).
4. Backend endpoints: REST or GraphQL with authentication.
5. Frontend pages: login, dashboard, transaction input, budgeting, reports.
6. Prompt templates for AI to parse financial messages and respond.
7. DevOps plan: containerized setup, environment variables, backup.
8. Security: Auth0/Firebase auth, 2FA, RBAC, backups.

-- Output full-stack integrated architecture with working logic between front-end, backend and AI features.
